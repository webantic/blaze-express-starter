'use strict'

const gulp = require('gulp')
const browserSync = require('browser-sync').create()
const less = require('gulp-less')
const lessGlob = require('less-plugin-glob')
const cleanCSS = require('gulp-clean-css')
const autoprefixer = require('gulp-autoprefixer')
const data = require('gulp-data')
const tap = require('gulp-tap')
const path = require('path')
const concat = require('gulp-concat')
const merge = require('merge-stream')
const rename = require('gulp-rename')
const insert = require('gulp-insert')
const uglify = require('gulp-minify')
const babel = require('gulp-babel')
const jetpack = require('fs-jetpack')
const notifier = require('node-notifier')
const plumber = require('gulp-plumber')
const wiredep = require('wiredep').stream
const ts = require('gulp-typescript')
const sourcemaps = require('gulp-sourcemaps')
const browserify = require('gulp-browserify')
const nodemon = require('gulp-nodemon')
const runSequence = require('run-sequence')
const replace = require('gulp-replace')

const compiledWarning = 'WARNING: Do not edit this file directly, it has been automatically generated. See /client for source files'

// Proxy Server + watch files
gulp.task('serve', function () {
  return nodemon({
    script: 'server.js',
    ext: 'js png otf woff woff2 jpeg jpg gif svg',
    'ignore': ['client/**/*'],
    stdout: true,
    quiet: true,
    'execMap': {
      '': '--harmony'
    },
    env: {
      NODE_ENV: 'development'
    },
    tasks: ['watch']
  })
})

// browser sync
gulp.task('watch', function () {
  browserSync.init({
    proxy: 'localhost:5000',
    logLevel: 'info',
    logPrefix: 'project-raccoon',
    open: false,

    // tunnel: "webanticsite",
    notify: true
  }, function () {
    notifier.notify({
      'title': 'Project Raccoon',
      'message': 'Serving at localhost:3000'
    })
  })
  gulp.watch(['client/lib/**/*.js', 'client/routes/**/*.js', 'client/templates/**/*.hbs'], function (cb) {
    runSequence('templateHTML', 'templateJS', 'browserify', browserSync.reload)
  })
  gulp.watch(['client/less/components/*.less', 'client/less/_constiables.less', 'client/less/_helpers.less'], ['less'])
  gulp.watch('public/images/**/*').on('change', browserSync.reload)
  gulp.watch('public/fonts/*').on('change', browserSync.reload)
})

// Compile less into CSS & auto-inject into browsers
gulp.task('less', function () {
  return gulp.src('client/less/main.less')
    .pipe(plumber())
    .pipe(less({
      plugins: [lessGlob]
    }))
    .pipe(cleanCSS({
      compatibility: 'ie8'
    }))
    .pipe(autoprefixer())
    .pipe(insert.prepend(`/* ${compiledWarning} */\n`))
    .pipe(gulp.dest('public/css'))
    .pipe(browserSync.stream())
})

// compile template html
gulp.task('templateHTML', function () {
  return gulp.src('client/templates/**/*.hbs')
    .pipe(tap(function (file, t) {
      let name = path.basename(file.path, '.hbs')
      file.contents = Buffer.concat([
        new Buffer(`compileTemplate("${name}", \`${String(file.contents).replace(/&gt;/g,">")}\`)`)
      ])
    }))
    .pipe(concat('templateHTML.js'))
    .pipe(insert.prepend(`
      let compileTemplate = function(name, html_text){
        let eval2 = eval
        try {
          let compiled = SpacebarsCompiler.compile(html_text, {isTemplate:true}),
              renderer = eval2(compiled)
          Template.__define__(name, renderer)
        } catch (err) {
          console.log('Error compiling template: ' + html_text)
          console.error(err)
        }
      }
    `))
    .pipe(insert.prepend(`
      const _ = require('underscore')
      const $ = require('jquery')
      window.Meteor = require('meteor-client')($,_)
      window.Blaze = Meteor.Blaze;
      window.Spacebars = Meteor.Spacebars;
      window.SpacebarsCompiler = Meteor.SpacebarsCompiler;
      window.Template = Meteor.Template;
    `))
    .pipe(gulp.dest('client/lib/blaze'))
})

// compile template js
gulp.task('templateJS', function () {
  return gulp.src('client/templates/**/*.js')
    .pipe(concat('templateJS.js'))
    .pipe(gulp.dest('client/lib/blaze'))
})

// browserify
gulp.task('browserify', function () {
  return gulp.src('client/main.js')
    // .pipe(sourcemaps.init({loadMaps: true}))
    .pipe(browserify({
      // insertGlobals : true,
      debug: true
    }))
    .pipe(replace("var global = this;", "var global = window;"))
    .pipe(babel({
      presets: ['es2015']
    }))
    // .pipe(uglify({
    //   ext: {
    //     src: '-debug.js',
    //     min: '.js'
    //   },
    //   noSource: true
    // }))
    // .pipe(sourcemaps.write('.'))
    .pipe(rename('client.js'))
    .pipe(gulp.dest('public/js'))
    .pipe(browserSync.stream())
})

gulp.task('build', function (cb) {
  runSequence('less', 'templateHTML', 'templateJS', 'browserify', cb)
})
gulp.task('default', ['build', 'serve'])
